"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var utils_1 = __importDefault(require("@strapi/utils"));
var PaginationError = utils_1.default.errors.PaginationError;
var ___paginateUsingStartLimit = function (data, start, limit) {
    var end = start + limit;
    return data.slice(start, end);
};
var ___paginateUsingPagePageSize = function (data, pageNumber, pageSize) {
    return data.slice((pageNumber - 1) * pageSize, pageNumber * pageSize);
};
var ___calculatePageCount = function (total, pageSize) {
    return Math.ceil(total / pageSize);
};
exports.default = (function (data, totalUserscount, pagination) {
    var isPaginated = false;
    var total = data.length;
    if (!Array.isArray(data)) {
        throw new PaginationError("Wrong data type expected Array recieved ".concat(typeof data));
    }
    if (!pagination) {
        pagination = {
            page: 1,
            pageSize: 25,
        };
    }
    var hasStart = "start" in pagination;
    var hasLimit = "limit" in pagination;
    if (hasStart && hasLimit) {
        pagination.start = Number(pagination.start);
        pagination.limit = Number(pagination.limit);
        isPaginated = true;
    }
    var hasPage = "page" in pagination;
    var hasPageSize = "pageSize" in pagination;
    var hasWithCount = "withCount" in pagination;
    if (hasPage && hasPageSize && !isPaginated) {
        pagination.page = Number(pagination.page);
        pagination.pageSize = Number(pagination.pageSize);
        if (!hasWithCount || pagination.withCount) {
            pagination.pageCount = ___calculatePageCount(totalUserscount, pagination.pageSize);
            if (hasWithCount) {
                delete pagination.withCount;
            }
        }
        isPaginated = true;
    }
    if (!isPaginated) {
        throw new PaginationError("Wrong pagination query!");
    }
    return {
        meta: {
            pagination: __assign(__assign({}, pagination), { total: total }),
        },
    };
});
//# sourceMappingURL=paginate.js.map