"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var utils_1 = __importDefault(require("@strapi/utils"));
var ApplicationError = utils_1.default.errors.ApplicationError;
var paginate_1 = __importDefault(require("../utils/paginate"));
var users_1 = require("../utils/users");
exports.default = (function (_a) {
    var strapi = _a.strapi;
    return ({
        get: function (entityId) { return __awaiter(void 0, void 0, void 0, function () {
            var user, firebaseUser, e_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4, strapi.firebase.auth().getUser(entityId)];
                    case 1:
                        user = _a.sent();
                        firebaseUser = user.toJSON();
                        return [2, firebaseUser];
                    case 2:
                        e_1 = _a.sent();
                        throw new ApplicationError(e_1.message.toString());
                    case 3: return [2];
                }
            });
        }); },
        create: function (payload) { return __awaiter(void 0, void 0, void 0, function () {
            var userRecord, e_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4, strapi.firebase
                                .auth()
                                .getUserByEmail(payload.email)
                                .catch(function (e) { return __awaiter(void 0, void 0, void 0, function () {
                                var response;
                                return __generator(this, function (_a) {
                                    switch (_a.label) {
                                        case 0:
                                            if (!(e.code === "auth/user-not-found")) return [3, 2];
                                            return [4, strapi.firebase.auth().createUser(payload)];
                                        case 1:
                                            response = _a.sent();
                                            return [2, response.toJSON()];
                                        case 2: return [2];
                                    }
                                });
                            }); })];
                    case 1:
                        userRecord = _a.sent();
                        if (userRecord) {
                            return [2, userRecord];
                        }
                        return [3, 3];
                    case 2:
                        e_2 = _a.sent();
                        throw new ApplicationError(e_2.message.toString());
                    case 3: return [2];
                }
            });
        }); },
        register: function (userID, payload) { return __awaiter(void 0, void 0, void 0, function () {
            var res, actionCodeSettings, link, e_3;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 4, , 5]);
                        return [4, strapi
                                .plugin("firebase-auth")
                                .service("userService")
                                .create(payload)];
                    case 1:
                        res = _a.sent();
                        actionCodeSettings = {
                            url: process.env.BASE_URL,
                        };
                        return [4, strapi.firebase
                                .auth()
                                .generatePasswordResetLink(payload.email, actionCodeSettings)];
                    case 2:
                        link = _a.sent();
                        return [4, strapi.plugin("users-permissions").service("user").edit(userID, {
                                firebaseUserID: res.uid,
                                passwordResetLink: link,
                            })];
                    case 3:
                        _a.sent();
                        return [3, 5];
                    case 4:
                        e_3 = _a.sent();
                        throw new ApplicationError(e_3.message.toString());
                    case 5: return [2];
                }
            });
        }); },
        list: function (pagination, nextPageToken) { return __awaiter(void 0, void 0, void 0, function () {
            var response, totalUserscount, strapiUsers, allUsers, meta;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, strapi.firebase
                            .auth()
                            .listUsers(parseInt(pagination.pageSize), nextPageToken)];
                    case 1:
                        response = _a.sent();
                        return [4, strapi.firebase.auth().listUsers()];
                    case 2:
                        totalUserscount = _a.sent();
                        return [4, strapi.db
                                .query("plugin::users-permissions.user")
                                .findMany()];
                    case 3:
                        strapiUsers = _a.sent();
                        allUsers = (0, users_1.formatUserData)(response, strapiUsers);
                        meta = (0, paginate_1.default)(response.users, totalUserscount.users.length, pagination).meta;
                        return [2, { data: allUsers.users, pageToken: response.pageToken, meta: meta }];
                }
            });
        }); },
        updateFirebaseUser: function (entityId, payload) { return __awaiter(void 0, void 0, void 0, function () {
            var e_4;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4, strapi.firebase.auth().updateUser(entityId, payload)];
                    case 1: return [2, _a.sent()];
                    case 2:
                        e_4 = _a.sent();
                        throw new ApplicationError(e_4.message.toString());
                    case 3: return [2];
                }
            });
        }); },
        update: function (entityId, payload) { return __awaiter(void 0, void 0, void 0, function () {
            var firebasePromise;
            return __generator(this, function (_a) {
                try {
                    firebasePromise = strapi.firebase
                        .auth()
                        .updateUser(entityId, payload);
                    return [2, Promise.allSettled([firebasePromise])];
                }
                catch (e) {
                    throw new ApplicationError(e.message.toString());
                }
                return [2];
            });
        }); },
        resetPasswordFirebaseUser: function (entityId, payload) { return __awaiter(void 0, void 0, void 0, function () {
            var e_5;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4, strapi.firebase.auth().updateUser(entityId, payload)];
                    case 1: return [2, _a.sent()];
                    case 2:
                        e_5 = _a.sent();
                        throw new ApplicationError(e_5.message.toString());
                    case 3: return [2];
                }
            });
        }); },
        resetPasswordStrapiUser: function (entityId, payload) { return __awaiter(void 0, void 0, void 0, function () {
            return __generator(this, function (_a) {
                try {
                    return [2, strapi
                            .query("plugin::users-permissions.user")
                            .update({ where: { firebaseUserID: entityId }, data: payload })];
                }
                catch (e) {
                    throw new ApplicationError(e.message.toString());
                }
                return [2];
            });
        }); },
        resetPassword: function (entityId, payload) { return __awaiter(void 0, void 0, void 0, function () {
            var firebasePromise, strapiPromise;
            return __generator(this, function (_a) {
                try {
                    firebasePromise = strapi.firebase
                        .auth()
                        .updateUser(entityId, payload);
                    strapiPromise = strapi
                        .query("plugin::users-permissions.user")
                        .update({ where: { firebaseUserID: entityId }, data: payload });
                    return [2, Promise.allSettled([firebasePromise, strapiPromise])];
                }
                catch (e) {
                    throw new ApplicationError(e.message.toString());
                }
                return [2];
            });
        }); },
        delete: function (entityId) { return __awaiter(void 0, void 0, void 0, function () {
            var firebasePromise, strapiPromise;
            return __generator(this, function (_a) {
                try {
                    firebasePromise = strapi.firebase.auth().deleteUser(entityId);
                    strapiPromise = strapi
                        .query("plugin::users-permissions.user")
                        .delete({ where: { firebaseUserID: entityId } });
                    return [2, Promise.allSettled([firebasePromise, strapiPromise])];
                }
                catch (e) {
                    throw new ApplicationError(e.message.toString());
                }
                return [2];
            });
        }); },
        deleteFirebaseUser: function (entityId) { return __awaiter(void 0, void 0, void 0, function () {
            var response, e_6;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4, strapi.firebase.auth().deleteUser(entityId)];
                    case 1:
                        response = _a.sent();
                        return [2, response];
                    case 2:
                        e_6 = _a.sent();
                        throw new ApplicationError(e_6.message.toString());
                    case 3: return [2];
                }
            });
        }); },
        deleteStrapiUser: function (entityId) { return __awaiter(void 0, void 0, void 0, function () {
            var response, e_7;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4, strapi
                                .query("plugin::users-permissions.user")
                                .delete({ where: { firebaseUserID: entityId } })];
                    case 1:
                        response = _a.sent();
                        return [2, response];
                    case 2:
                        e_7 = _a.sent();
                        throw new ApplicationError(e_7.message.toString());
                    case 3: return [2];
                }
            });
        }); },
        deleteMany: function (entityIDs) { return __awaiter(void 0, void 0, void 0, function () {
            var response, e_8;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4, strapi.firebase
                                .auth()
                                .deleteUsers(JSON.parse(entityIDs))];
                    case 1:
                        response = _a.sent();
                        return [2, response];
                    case 2:
                        e_8 = _a.sent();
                        throw new ApplicationError(e_8.message.toString());
                    case 3: return [2];
                }
            });
        }); },
        setSocialMetaData: function () {
            return __awaiter(this, void 0, void 0, function () { return __generator(this, function (_a) {
                return [2];
            }); });
        },
    });
});
//# sourceMappingURL=userService.js.map