"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var utils_1 = __importDefault(require("@strapi/utils"));
var firebase_admin_1 = __importDefault(require("firebase-admin"));
var check_valid_json_1 = __importDefault(require("../utils/check-valid-json"));
var crypto_js_1 = __importDefault(require("crypto-js"));
var _a = utils_1.default.errors, ValidationError = _a.ValidationError, ApplicationError = _a.ApplicationError;
exports.default = (function (_a) {
    var strapi = _a.strapi;
    var encryptionKey = strapi
        .plugin("firebase-auth")
        .config("FIREBASE_JSON_ENCRYPTION_KEY");
    return {
        init: function () {
            return __awaiter(this, void 0, void 0, function () {
                var res, jsonObject, firebaseConfigJson, serviceAccount, error_1;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _a.trys.push([0, 9, , 10]);
                            return [4, strapi.entityService.findMany("plugin::firebase-auth.firebase-auth-configuration")];
                        case 1:
                            res = _a.sent();
                            if (!!res) return [3, 4];
                            if (!strapi.firebase) return [3, 3];
                            return [4, strapi.firebase.app().delete()];
                        case 2:
                            _a.sent();
                            _a.label = 3;
                        case 3: return [2];
                        case 4:
                            jsonObject = res["firebase-config-json"];
                            if (!(!jsonObject || !jsonObject.firebaseConfigJson)) return [3, 7];
                            if (!strapi.firebase) return [3, 6];
                            return [4, strapi.firebase.delete()];
                        case 5:
                            _a.sent();
                            _a.label = 6;
                        case 6: return [2];
                        case 7: return [4, this.decryptJson(encryptionKey, jsonObject.firebaseConfigJson)];
                        case 8:
                            firebaseConfigJson = _a.sent();
                            serviceAccount = (0, check_valid_json_1.default)(firebaseConfigJson);
                            if (!serviceAccount)
                                return [2];
                            firebase_admin_1.default.initializeApp({
                                credential: firebase_admin_1.default.credential.cert(serviceAccount),
                            });
                            strapi.firebase = firebase_admin_1.default;
                            return [3, 10];
                        case 9:
                            error_1 = _a.sent();
                            console.log("bootstrap error -->", error_1);
                            return [3, 10];
                        case 10: return [2];
                    }
                });
            });
        },
        getFirebaseConfigJson: function () {
            return __awaiter(this, void 0, void 0, function () {
                var key, configObject, firebaseConfigJsonObj, hashedJson, firebaseConfigJson, error_2;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            key = encryptionKey;
                            _a.label = 1;
                        case 1:
                            _a.trys.push([1, 4, , 5]);
                            return [4, strapi.entityService.findMany("plugin::firebase-auth.firebase-auth-configuration")];
                        case 2:
                            configObject = _a.sent();
                            firebaseConfigJsonObj = configObject["firebase-config-json"];
                            hashedJson = firebaseConfigJsonObj["firebaseConfigJson"];
                            return [4, this.decryptJson(key, hashedJson)];
                        case 3:
                            firebaseConfigJson = _a.sent();
                            return [2, { firebaseConfigJson: firebaseConfigJson }];
                        case 4:
                            error_2 = _a.sent();
                            throw new ApplicationError("some thing went wrong", {
                                error: error_2.message,
                            });
                        case 5: return [2];
                    }
                });
            });
        },
        setFirebaseConfigJson: function (ctx) {
            return __awaiter(this, void 0, void 0, function () {
                var firebaseConfigJson, firebaseConfigJsonString, hash, isExist, res, firebaseConfigHash, firebaseConfigJsonValue, error_3;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _a.trys.push([0, 9, , 10]);
                            firebaseConfigJson = ctx.request.body;
                            firebaseConfigJsonString = firebaseConfigJson.firebaseConfigJson;
                            return [4, this.encryptJson(encryptionKey, firebaseConfigJsonString)];
                        case 1:
                            hash = _a.sent();
                            if (!firebaseConfigJson)
                                throw new ValidationError("data is missing");
                            return [4, strapi.entityService.findMany("plugin::firebase-auth.firebase-auth-configuration")];
                        case 2:
                            isExist = _a.sent();
                            res = void 0;
                            if (!!isExist) return [3, 4];
                            return [4, strapi.entityService.create("plugin::firebase-auth.firebase-auth-configuration", {
                                    data: { "firebase-config-json": { firebaseConfigJson: hash } },
                                })];
                        case 3:
                            res = _a.sent();
                            return [3, 6];
                        case 4: return [4, strapi.entityService.update("plugin::firebase-auth.firebase-auth-configuration", isExist.id, {
                                data: {
                                    "firebase-config-json": { firebaseConfigJson: hash },
                                },
                            })];
                        case 5:
                            res = _a.sent();
                            _a.label = 6;
                        case 6: return [4, strapi.plugin("firebase-auth").service("settingsService").init()];
                        case 7:
                            _a.sent();
                            firebaseConfigHash = res["firebase-config-json"].firebaseConfigJson;
                            return [4, this.decryptJson(encryptionKey, firebaseConfigHash)];
                        case 8:
                            firebaseConfigJsonValue = _a.sent();
                            res["firebase-config-json"].firebaseConfigJson =
                                firebaseConfigJsonValue;
                            return [2, res];
                        case 9:
                            error_3 = _a.sent();
                            throw new ApplicationError("some thing went wrong", {
                                error: error_3.message,
                            });
                        case 10: return [2];
                    }
                });
            });
        },
        delFirebaseConfigJson: function () { return __awaiter(void 0, void 0, void 0, function () {
            var isExist, res, error_4;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 4, , 5]);
                        return [4, strapi.entityService.findMany("plugin::firebase-auth.firebase-auth-configuration")];
                    case 1:
                        isExist = _a.sent();
                        return [4, strapi.entityService.delete("plugin::firebase-auth.firebase-auth-configuration", isExist.id)];
                    case 2:
                        res = _a.sent();
                        return [4, strapi.plugin("firebase-auth").service("settingsService").init()];
                    case 3:
                        _a.sent();
                        return [2, res];
                    case 4:
                        error_4 = _a.sent();
                        throw new ApplicationError("some thing went wrong", {
                            error: error_4,
                        });
                    case 5: return [2];
                }
            });
        }); },
        encryptJson: function (key, json) {
            return __awaiter(this, void 0, void 0, function () {
                var encrypted;
                return __generator(this, function (_a) {
                    encrypted = crypto_js_1.default.AES.encrypt(json, key).toString();
                    return [2, encrypted];
                });
            });
        },
        decryptJson: function (key, hash) {
            return __awaiter(this, void 0, void 0, function () {
                var decrypted;
                return __generator(this, function (_a) {
                    decrypted = crypto_js_1.default.AES.decrypt(hash, key).toString(crypto_js_1.default.enc.Utf8);
                    return [2, decrypted];
                });
            });
        },
        restart: function () {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    strapi.log.info("*".repeat(100));
                    strapi.log.info("SERVER IS RESTARTING");
                    setImmediate(function () { return strapi.reload(); });
                    strapi.log.info("*".repeat(100));
                    return [2];
                });
            });
        },
    };
});
//# sourceMappingURL=settingsService.js.map