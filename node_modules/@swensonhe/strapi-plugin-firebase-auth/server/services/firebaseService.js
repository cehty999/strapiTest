"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var utils_1 = __importDefault(require("@strapi/utils"));
var ValidationError = utils_1.default.errors.ValidationError;
var fetch_me_1 = require("../utils/fetch-me");
var utils_2 = require("../utils");
var promiseHandler_1 = require("../utils/promiseHandler");
var createFakeEmail = function () { return __awaiter(void 0, void 0, void 0, function () {
    var randomString, fakeEmail, anotherUserWithTheSameReferralCode;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                randomString = (0, utils_2.generateReferralCode)(8).toLowerCase();
                fakeEmail = "".concat(randomString, "@$maz.com");
                return [4, strapi.db
                        .query("plugin::users-permissions.user")
                        .findOne({
                        where: { email: fakeEmail },
                    })];
            case 1:
                anotherUserWithTheSameReferralCode = _a.sent();
                _a.label = 2;
            case 2:
                if (!anotherUserWithTheSameReferralCode) return [3, 4];
                randomString = (0, utils_2.generateReferralCode)(8);
                return [4, strapi.db
                        .query("plugin::users-permissions.user")
                        .findOne({
                        where: { email: fakeEmail },
                    })];
            case 3:
                anotherUserWithTheSameReferralCode = _a.sent();
                return [3, 2];
            case 4: return [2, fakeEmail];
        }
    });
}); };
exports.default = (function (_a) {
    var strapi = _a.strapi;
    return ({
        getUserAttributes: function () {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2, strapi.plugins["users-permissions"].contentTypes["user"].attributes];
                });
            });
        },
        delete: function (entityId) { return __awaiter(void 0, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, strapi.firebase.auth().deleteUser(entityId)];
                    case 1:
                        _a.sent();
                        return [2, { success: true }];
                }
            });
        }); },
        validateExchangeTokenPayload: function (requestPayload) { return __awaiter(void 0, void 0, void 0, function () {
            var idToken;
            return __generator(this, function (_a) {
                idToken = requestPayload.idToken;
                if (!idToken || idToken.length === 0) {
                    throw new ValidationError("idToken is missing!");
                }
                return [2, strapi.firebase.auth().verifyIdToken(idToken)];
            });
        }); },
        decodeIDToken: function (idToken) { return __awaiter(void 0, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, strapi.firebase.auth().verifyIdToken(idToken)];
                    case 1: return [2, _a.sent()];
                }
            });
        }); },
        overrideFirebaseAccess: function (ctx) { return __awaiter(void 0, void 0, void 0, function () {
            var overrideUserId, user, jwt, _a;
            var _b;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        if (!ctx.request.body || !ctx.request.body.overrideUserId) {
                            return [2, ctx.badRequest(null, [{ messages: [{ id: "unauthorized" }] }])];
                        }
                        overrideUserId = ctx.request.body.overrideUserId;
                        return [4, strapi.plugins["users-permissions"].services.user.fetch(overrideUserId)];
                    case 1:
                        user = _c.sent();
                        return [4, strapi.plugins["users-permissions"].services.jwt.issue({
                                id: user.id,
                            })];
                    case 2:
                        jwt = _c.sent();
                        _a = ctx;
                        _b = {};
                        return [4, (0, fetch_me_1.processMeData)(user)];
                    case 3:
                        _a.body = (_b.user = _c.sent(),
                            _b.jwt = jwt,
                            _b);
                        return [2, ctx.body];
                }
            });
        }); },
        checkIfUserExists: function (decodedToken) {
            return __awaiter(this, void 0, void 0, function () {
                var user, userModel, filter;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4, this.getUserAttributes()];
                        case 1:
                            userModel = _a.sent();
                            if (!decodedToken.email) return [3, 3];
                            filter = Object.keys(userModel).find(function (key) { return key === "appleEmail"; })
                                ? {
                                    $or: [
                                        { appleEmail: decodedToken.email },
                                        { email: decodedToken.email },
                                    ],
                                }
                                : {
                                    $or: [{ email: decodedToken.email }],
                                };
                            return [4, strapi.db.query("plugin::users-permissions.user").findOne({
                                    where: filter,
                                })];
                        case 2:
                            user = _a.sent();
                            return [3, 7];
                        case 3:
                            if (!decodedToken.phone_number) return [3, 5];
                            return [4, strapi.db.query("plugin::users-permissions.user").findOne({
                                    where: {
                                        phoneNumber: decodedToken.phone_number,
                                    },
                                })];
                        case 4:
                            user = _a.sent();
                            return [3, 7];
                        case 5:
                            if (!Object.keys(userModel).find(function (key) { return key === "firebaseUserID"; })) return [3, 7];
                            return [4, strapi.db.query("plugin::users-permissions.user").findOne({
                                    where: {
                                        firebaseUserID: decodedToken.user_id || decodedToken.uid,
                                    },
                                })];
                        case 6:
                            user = _a.sent();
                            _a.label = 7;
                        case 7: return [2, !!user];
                    }
                });
            });
        },
        fetchUser: function (decodedToken) { return __awaiter(void 0, void 0, void 0, function () {
            var _a, user, error;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4, (0, promiseHandler_1.promiseHandler)(strapi.db.query("plugin::users-permissions.user").findOne({
                            where: {
                                firebaseUserID: decodedToken.uid,
                            },
                        }))];
                    case 1:
                        _a = _b.sent(), user = _a.data, error = _a.error;
                        if (error) {
                            throw new ValidationError((error === null || error === void 0 ? void 0 : error.message) || "User not found", error);
                        }
                        return [2, user];
                }
            });
        }); },
        generateJWTForCurrentUser: function (user) { return __awaiter(void 0, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2, strapi.plugins["users-permissions"].services.jwt.issue({
                        id: user.id,
                    })];
            });
        }); },
        createStrapiUser: function (decodedToken, idToken, profileMetaData) {
            return __awaiter(this, void 0, void 0, function () {
                var userPayload, pluginStore, settings, role, emailComponents, _a, _b;
                return __generator(this, function (_c) {
                    switch (_c.label) {
                        case 0:
                            userPayload = {};
                            return [4, strapi.store({
                                    environment: "",
                                    type: "plugin",
                                    name: "users-permissions",
                                })];
                        case 1:
                            pluginStore = _c.sent();
                            return [4, pluginStore.get({
                                    key: "advanced",
                                })];
                        case 2:
                            settings = _c.sent();
                            return [4, strapi.db
                                    .query("plugin::users-permissions.role")
                                    .findOne({ where: { type: settings.default_role } })];
                        case 3:
                            role = _c.sent();
                            userPayload.role = role.id;
                            userPayload.firebaseUserID = decodedToken.uid;
                            userPayload.confirmed = true;
                            userPayload.email = decodedToken.email;
                            userPayload.phoneNumber = decodedToken.phone_number;
                            userPayload.idToken = idToken;
                            if (profileMetaData) {
                                userPayload.firstName = profileMetaData === null || profileMetaData === void 0 ? void 0 : profileMetaData.firstName;
                                userPayload.lastName = profileMetaData === null || profileMetaData === void 0 ? void 0 : profileMetaData.lastName;
                                userPayload.phoneNumber = profileMetaData === null || profileMetaData === void 0 ? void 0 : profileMetaData.phoneNumber;
                            }
                            if (!decodedToken.email) return [3, 4];
                            emailComponents = decodedToken.email.split("@");
                            userPayload.username = emailComponents[0];
                            if (emailComponents[1].includes("privaterelay.appleid.com")) {
                                userPayload.appleEmail = decodedToken.email;
                            }
                            return [3, 7];
                        case 4:
                            userPayload.username = userPayload.phoneNumber;
                            _a = userPayload;
                            _b = (profileMetaData === null || profileMetaData === void 0 ? void 0 : profileMetaData.email);
                            if (_b) return [3, 6];
                            return [4, createFakeEmail()];
                        case 5:
                            _b = (_c.sent());
                            _c.label = 6;
                        case 6:
                            _a.email = _b;
                            _c.label = 7;
                        case 7: return [2, strapi
                                .query("plugin::users-permissions.user")
                                .create({ data: userPayload })];
                    }
                });
            });
        },
        updateUserIDToken: function (user, idToken) { return __awaiter(void 0, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2, strapi.db.query("plugin::users-permissions.user").update({
                        where: {
                            id: user.id,
                        },
                        data: { idToken: idToken },
                    })];
            });
        }); },
        validateFirebaseToken: function (ctx) { return __awaiter(void 0, void 0, void 0, function () {
            var profileMetaData, error, idToken, populate, decodedToken, userExists, user, jwt;
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        profileMetaData = ctx.request.body.profileMetaData;
                        return [4, (0, promiseHandler_1.promiseHandler)(strapi
                                .plugin("firebase-auth")
                                .service("firebaseService")
                                .validateExchangeTokenPayload(ctx.request.body))];
                    case 1:
                        error = (_b.sent()).error;
                        if (error) {
                            ctx.status = 400;
                            return [2, { error: error.message }];
                        }
                        idToken = ctx.request.body.idToken;
                        populate = ctx.request.query.populate || [];
                        return [4, strapi
                                .plugin("firebase-auth")
                                .service("firebaseService")
                                .decodeIDToken(idToken)];
                    case 2:
                        decodedToken = _b.sent();
                        return [4, strapi
                                .plugin("firebase-auth")
                                .service("firebaseService")
                                .checkIfUserExists(decodedToken, profileMetaData)];
                    case 3:
                        userExists = _b.sent();
                        if (!userExists) return [3, 5];
                        return [4, strapi
                                .plugin("firebase-auth")
                                .service("firebaseService")
                                .fetchUser(decodedToken)];
                    case 4:
                        user = _b.sent();
                        _b.label = 5;
                    case 5:
                        if (!!user) return [3, 7];
                        return [4, strapi
                                .plugin("firebase-auth")
                                .service("firebaseService")
                                .createStrapiUser(decodedToken, idToken, profileMetaData)];
                    case 6:
                        user = _b.sent();
                        _b.label = 7;
                    case 7: return [4, strapi
                            .plugin("firebase-auth")
                            .service("firebaseService")
                            .generateJWTForCurrentUser(user)];
                    case 8:
                        jwt = _b.sent();
                        strapi
                            .plugin("firebase-auth")
                            .service("firebaseService")
                            .updateUserIDToken(user, idToken);
                        _a = {};
                        return [4, (0, fetch_me_1.processMeData)(user, populate)];
                    case 9: return [2, (_a.user = _b.sent(),
                            _a.jwt = jwt,
                            _a)];
                }
            });
        }); },
    });
});
//# sourceMappingURL=firebaseService.js.map