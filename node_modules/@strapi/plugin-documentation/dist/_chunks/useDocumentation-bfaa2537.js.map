{"version":3,"file":"useDocumentation-bfaa2537.js","sources":["../../admin/src/utils/getTrad.js","../../admin/src/hooks/useDocumentation.js"],"sourcesContent":["import pluginId from '../pluginId';\n\nconst getTrad = (id) => `${pluginId}.${id}`;\n\nexport default getTrad;\n","import { useEffect } from 'react';\n\nimport { useFetchClient, useNotification, useAPIErrorHandler } from '@strapi/helper-plugin';\nimport { useMutation, useQuery } from 'react-query';\n\nimport pluginId from '../pluginId';\nimport getTrad from '../utils/getTrad';\n\nexport const useDocumentation = () => {\n  const toggleNotification = useNotification();\n  const { del, post, put, get } = useFetchClient();\n\n  const { formatAPIError } = useAPIErrorHandler();\n\n  const { isLoading, isError, data, refetch, error } = useQuery(\n    ['get-documentation', pluginId],\n    async () => {\n      const { data } = await get(`/${pluginId}/getInfos`);\n\n      return data;\n    }\n  );\n\n  useEffect(() => {\n    if (isError && error) {\n      toggleNotification({\n        type: 'warning',\n        message: error ? formatAPIError(error) : { id: 'notification.error' },\n      });\n    }\n  }, [isError, error, toggleNotification, formatAPIError]);\n\n  const handleError = (err) => {\n    toggleNotification({\n      type: 'warning',\n      message: formatAPIError(err),\n    });\n  };\n\n  const handleSuccess = (type, tradId, defaultMessage) => {\n    refetch();\n    toggleNotification({\n      type,\n      message: { id: getTrad(tradId), defaultMessage },\n    });\n  };\n\n  const deleteMutation = useMutation(\n    ({ prefix, version }) => del(`${prefix}/deleteDoc/${version}`),\n    {\n      onSuccess: () =>\n        handleSuccess('info', 'notification.delete.success', 'Successfully deleted documentation'),\n      onError: handleError,\n    }\n  );\n\n  const submit = useMutation(({ prefix, body }) => put(`${prefix}/updateSettings`, body), {\n    onSuccess: () =>\n      handleSuccess('success', 'notification.update.success', 'Successfully updated settings'),\n    onError: handleError,\n  });\n\n  const regenerate = useMutation(\n    ({ prefix, version }) => post(`${prefix}/regenerateDoc`, { version }),\n    {\n      onSuccess: () =>\n        handleSuccess(\n          'info',\n          'notification.generate.success',\n          'Successfully generated documentation'\n        ),\n      onError: handleError,\n    }\n  );\n\n  return { data, isLoading, isError, remove: deleteMutation, submit, regenerate };\n};\n"],"names":["pluginId","useNotification","useFetchClient","useAPIErrorHandler","useQuery","data","useEffect","useMutation"],"mappings":";;;;;AAEA,MAAM,UAAU,CAAC,OAAO,GAAGA,MAAAA,QAAQ,IAAI,EAAE;ACMlC,MAAM,mBAAmB,MAAM;AACpC,QAAM,qBAAqBC,aAAAA;AAC3B,QAAM,EAAE,KAAK,MAAM,KAAK,IAAA,IAAQC,aAAAA;AAE1B,QAAA,EAAE,mBAAmBC,aAAAA;AAE3B,QAAM,EAAE,WAAW,SAAS,MAAM,SAAS,UAAUC,WAAA;AAAA,IACnD,CAAC,qBAAqBJ,MAAAA,QAAQ;AAAA,IAC9B,YAAY;AACJ,YAAA,EAAE,MAAAK,MAAK,IAAI,MAAM,IAAI,IAAIL,MAAAA,QAAQ,WAAW;AAE3CK,aAAAA;AAAAA,IACT;AAAA,EAAA;AAGFC,QAAAA,UAAU,MAAM;AACd,QAAI,WAAW,OAAO;AACD,yBAAA;AAAA,QACjB,MAAM;AAAA,QACN,SAAS,QAAQ,eAAe,KAAK,IAAI,EAAE,IAAI,qBAAqB;AAAA,MAAA,CACrE;AAAA,IACH;AAAA,KACC,CAAC,SAAS,OAAO,oBAAoB,cAAc,CAAC;AAEjD,QAAA,cAAc,CAAC,QAAQ;AACR,uBAAA;AAAA,MACjB,MAAM;AAAA,MACN,SAAS,eAAe,GAAG;AAAA,IAAA,CAC5B;AAAA,EAAA;AAGH,QAAM,gBAAgB,CAAC,MAAM,QAAQ,mBAAmB;AAC9C;AACW,uBAAA;AAAA,MACjB;AAAA,MACA,SAAS,EAAE,IAAI,QAAQ,MAAM,GAAG,eAAe;AAAA,IAAA,CAChD;AAAA,EAAA;AAGH,QAAM,iBAAiBC,WAAA;AAAA,IACrB,CAAC,EAAE,QAAQ,QAAQ,MAAM,IAAI,GAAG,MAAM,cAAc,OAAO,EAAE;AAAA,IAC7D;AAAA,MACE,WAAW,MACT,cAAc,QAAQ,+BAA+B,oCAAoC;AAAA,MAC3F,SAAS;AAAA,IACX;AAAA,EAAA;AAGF,QAAM,SAASA,WAAAA,YAAY,CAAC,EAAE,QAAQ,KAAA,MAAW,IAAI,GAAG,MAAM,mBAAmB,IAAI,GAAG;AAAA,IACtF,WAAW,MACT,cAAc,WAAW,+BAA+B,+BAA+B;AAAA,IACzF,SAAS;AAAA,EAAA,CACV;AAED,QAAM,aAAaA,WAAA;AAAA,IACjB,CAAC,EAAE,QAAQ,QAAQ,MAAM,KAAK,GAAG,MAAM,kBAAkB,EAAE,SAAS;AAAA,IACpE;AAAA,MACE,WAAW,MACT;AAAA,QACE;AAAA,QACA;AAAA,QACA;AAAA,MACF;AAAA,MACF,SAAS;AAAA,IACX;AAAA,EAAA;AAGF,SAAO,EAAE,MAAM,WAAW,SAAS,QAAQ,gBAAgB,QAAQ;AACrE;;;"}