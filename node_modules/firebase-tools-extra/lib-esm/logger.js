import { __read, __spread } from "tslib";
import chalk from 'chalk';
import fig from 'figures';
var colorMapping = {
    warn: 'yellow',
    success: 'green',
    error: 'red',
};
var iconMapping = {
    info: 'ℹ',
    warn: '⚠',
    success: '✔',
    error: '✖',
};
var prefixMapping = {
    warn: 'Warning: ',
    error: 'Error: ',
};
/**
 * Create a function for coloring the log based on type
 * @param type - Log type
 * @returns A color logger function
 */
function colorLogger(type) {
    var color = colorMapping[type];
    return function (text) {
        var chalkColor = chalk[color];
        return chalkColor ? chalkColor(text) : text;
    };
}
/**
 * Log using a specific type (colorizes for CLI)
 * @param type - Log type
 * @param message - Message containing info to log
 * @param other - Other values to pass to info
 */
function logType(type, message, other) {
    var icon = iconMapping[type];
    var prefix = prefixMapping[type];
    var colorLog = colorLogger(type);
    var args = [
        (icon ? colorLog(fig(icon)) : '') + " " + (prefix ? colorLog(prefix) : '') + message,
    ];
    if (other) {
        args.push(other);
    }
    /* eslint-disable no-console */
    console.log.apply(console, __spread(args));
    /* eslint-enable no-console */
}
export var log = console.log; // eslint-disable-line
/**
 * Log info within console
 * @param message - Message containing info to log
 * @param other - Other values to pass to info
 * @returns undefined
 */
export function info(message, other) {
    return logType('info', message, other);
}
/**
 * Log a success within console (colorized with green)
 * @param message - Success message to log
 * @param other - Other values to pass to info
 * @returns undefined
 */
export function success(message, other) {
    return logType('success', message, other);
}
/**
 * Log a warning within the console (colorized with yellow)
 * @param message - Warning message to log
 * @param other - Other values to pass to info
 * @returns undefined
 */
export function warn(message, other) {
    return logType('warn', message, other);
}
/**
 * Log an error within console (colorized with red)
 * @param message - Error message to log
 * @param other - Other values to pass to info
 * @returns undefined
 */
export function error(message, other) {
    return logType('error', message, other);
}
